{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jonat\\\\Desktop\\\\otros\\\\udemy\\\\react\\\\mi-app\\\\client\\\\src\\\\context\\\\shop-context.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport axios from 'axios'; //se importa axios para generar peticiones al servidor\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ShopContext = /*#__PURE__*/createContext(null);\nconst URI = 'http://localhost:3001/read'; //esta sera la ruta a la cual se generaran peticiones en este caso sera para los productos\n\nconst getDefaultCart = () => {\n  //se crea un arreglo que se usara para darle una cantidad a cada producto esto, cada posicion del arreglo contendra un cero como cantidad\n  let cart = {};\n  for (let i = 1; i < 12; i++) {\n    cart[i] = 0;\n  }\n  return cart;\n};\nexport const ShopContextProvider = props => {\n  _s();\n  const [cartItems, setCartItems] = useState(getDefaultCart()); //aqui se almacenaran los productos ingresados dentro del carrito\n  const [payAumount, setPayAumount] = useState(0); //aqui se guarda el total de la compra\n\n  const [products, setProducts] = useState([]); //aqui va a obtener todos los productos que se encuentran dentro de la base de datos\n  useEffect(() => {\n    getProducts();\n  }, []);\n  const [inventario, setInventario] = useState([]);\n  const [logged, setLogged] = useState(0); //este hook es para saber si hay un usuario logeado en la pagina\n  const loggedChanger = value => setLogged(value); //con esto se le cambia el valor al hook logged \n\n  const [admin, setAdmin] = useState(false); //se utiliza para saber si el usuario es un admin, por defecto el hook se encuentra en falso\n  const AdminChanger = value => setAdmin(value);\n  const getProducts = async () => {\n    //aqui se hacen las peticiones a la base de datos para obtener todos los productos\n    const res = await axios.get(URI);\n    setProducts(res.data);\n  };\n  const getTotalCartAmount = () => {\n    //esta funcion permite dabe\n    let totalAmount = 0; //se crea una variable con el total que comenzara en 0\n    for (const item in cartItems) {\n      //se crea una bucle que recorre cada item del arreglo carItems \n      if (cartItems[item] > 0) {\n        //se pregunta si el valor del en la posicion item de ese arreglo es mayor de 0\n        let itemInfo = products.find(product => product.id === Number(item)); //dentro de una variable se almacena el producto para poder usar el precio mas adelante\n        totalAmount += cartItems[item] * itemInfo.precio; //dentro de totalAmount se almacena la multiplicacion del precio del producto multiplicado por la cantidad de productos que se encuentra del arreglo\n      }\n    }\n    return totalAmount; //retorna el valor total de la compra \n  };\n  const addToCart = async itemId => {\n    //funcion para poder agregar al carrito enviando como parametro el id del producto y poder reservarlo en el servidor\n    await axios.get(`http://localhost:3001/inventario/${itemId}`).then(({\n      data\n    }) => {\n      setInventario(data);\n      console.log(data.inventario.valueOf);\n      data === 'Booked' ? setCartItems(prev => ({\n        ...prev,\n        [itemId]: prev[itemId] + 1\n      })) : void 0; //si el dato extraido es Booked le sumamos 1 a la posicion que represente al producto dentro del arreglo para poder saber la cantidad de cada producto\n      data === 'Stockout' ? alert('Empty product') : void 0; //en caso de que el estado retornado sea Stockout se crea una alerta que dice que el producto esta vacio y no hace nada\n    }).catch(error => {\n      console.log(error.message); //si hay un error lo muestra por consola\n    });\n  };\n  const removeFromCart = async itemId => {\n    //funcion para remover del carrito a partir del id\n    await axios.get('http://localhost:3001/products/book/' + itemId + '?f=unbook') //en esta ruta se hace la peticion\n    .then(({\n      data\n    }) => {\n      data === 'Unbooked' ? setCartItems(prev => ({\n        ...prev,\n        [itemId]: prev[itemId] - 1\n      })) : void 0; //si tiene el estado unbooked se le resta 1 en el arreglo de la cantidad\n    }).catch(error => {\n      console.log(error.message);\n    });\n  };\n  const contextValue = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    getTotalCartAmount,\n    loggedChanger,\n    logged,\n    AdminChanger,\n    admin,\n    payAumount,\n    setPayAumount\n  }; //metemos todas las funciones y hooks dentro del contexto\n  return /*#__PURE__*/_jsxDEV(ShopContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(ShopContextProvider, \"8xnZTaSkSQXch6hr/K1p5SndOIE=\");\n_c = ShopContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ShopContextProvider\");","map":{"version":3,"names":["React","createContext","useState","axios","useEffect","jsxDEV","_jsxDEV","ShopContext","URI","getDefaultCart","cart","i","ShopContextProvider","props","_s","cartItems","setCartItems","payAumount","setPayAumount","products","setProducts","getProducts","inventario","setInventario","logged","setLogged","loggedChanger","value","admin","setAdmin","AdminChanger","res","get","data","getTotalCartAmount","totalAmount","item","itemInfo","find","product","id","Number","precio","addToCart","itemId","then","console","log","valueOf","prev","alert","catch","error","message","removeFromCart","contextValue","Provider","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jonat/Desktop/otros/udemy/react/mi-app/client/src/context/shop-context.jsx"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\nimport axios from 'axios';//se importa axios para generar peticiones al servidor\r\nimport { useEffect } from 'react';\r\n\r\nexport const ShopContext = createContext(null);\r\nconst URI = 'http://localhost:3001/read';//esta sera la ruta a la cual se generaran peticiones en este caso sera para los productos\r\n\r\n\r\nconst getDefaultCart = () => {//se crea un arreglo que se usara para darle una cantidad a cada producto esto, cada posicion del arreglo contendra un cero como cantidad\r\n    let cart = {}\r\n    for(let i = 1; i < 12 ; i++) {\r\n        cart[i] = 0\r\n    }\r\n    return cart;\r\n};\r\n\r\nexport const ShopContextProvider = (props) => {\r\n    const [cartItems, setCartItems] = useState(getDefaultCart()); //aqui se almacenaran los productos ingresados dentro del carrito\r\n    const [payAumount,setPayAumount] = useState(0);//aqui se guarda el total de la compra\r\n\r\n    const[products, setProducts] = useState([])//aqui va a obtener todos los productos que se encuentran dentro de la base de datos\r\n    useEffect(() => {\r\n        getProducts()\r\n    }, []);\r\n\r\n    const [inventario, setInventario] = useState([]);\r\n\r\n    const [logged, setLogged] = useState(0);//este hook es para saber si hay un usuario logeado en la pagina\r\n    const loggedChanger = (value) => setLogged(value);//con esto se le cambia el valor al hook logged \r\n\r\n    const [admin, setAdmin] = useState(false);//se utiliza para saber si el usuario es un admin, por defecto el hook se encuentra en falso\r\n    const AdminChanger = (value) => setAdmin(value);\r\n    \r\n    const getProducts = async () => {//aqui se hacen las peticiones a la base de datos para obtener todos los productos\r\n        const res = await axios.get(URI)\r\n        setProducts(res.data);\r\n\r\n    }\r\n\r\n\r\n    const getTotalCartAmount = () => {//esta funcion permite dabe\r\n        let totalAmount = 0;//se crea una variable con el total que comenzara en 0\r\n        for (const item in cartItems) {//se crea una bucle que recorre cada item del arreglo carItems \r\n            if (cartItems[item] > 0) { //se pregunta si el valor del en la posicion item de ese arreglo es mayor de 0\r\n                let itemInfo = products.find((product) => product.id === Number(item)); //dentro de una variable se almacena el producto para poder usar el precio mas adelante\r\n                totalAmount += cartItems[item] * itemInfo.precio; //dentro de totalAmount se almacena la multiplicacion del precio del producto multiplicado por la cantidad de productos que se encuentra del arreglo\r\n            }\r\n        }\r\n \r\n        return totalAmount;//retorna el valor total de la compra \r\n    };\r\n\r\n\r\n\r\n    const addToCart = async (itemId) => { //funcion para poder agregar al carrito enviando como parametro el id del producto y poder reservarlo en el servidor\r\n        await axios.get(`http://localhost:3001/inventario/${itemId}`)\r\n        .then(({ data }) => {\r\n            setInventario(data);\r\n            \r\n            console.log(data.inventario.valueOf);\r\n\r\n            data==='Booked' ? setCartItems((prev) => ({...prev, [itemId]: prev[itemId] + 1 })) : void(0);//si el dato extraido es Booked le sumamos 1 a la posicion que represente al producto dentro del arreglo para poder saber la cantidad de cada producto\r\n            data==='Stockout' ? alert('Empty product') : void(0); //en caso de que el estado retornado sea Stockout se crea una alerta que dice que el producto esta vacio y no hace nada\r\n        })\r\n        .catch(error => {\r\n            console.log(error.message);//si hay un error lo muestra por consola\r\n        }) \r\n    };\r\n\r\n    const removeFromCart = async (itemId) => { //funcion para remover del carrito a partir del id\r\n        await axios.get('http://localhost:3001/products/book/'+ itemId + '?f=unbook')//en esta ruta se hace la peticion\r\n        .then(({ data }) => {\r\n            data==='Unbooked' ? setCartItems((prev) => ({...prev, [itemId]: prev[itemId] - 1 })) : void(0);//si tiene el estado unbooked se le resta 1 en el arreglo de la cantidad\r\n        })\r\n        .catch(error => {\r\n            console.log(error.message);\r\n        }) \r\n    };\r\n\r\n    const contextValue = { cartItems, addToCart, removeFromCart, getTotalCartAmount, loggedChanger, logged, AdminChanger, admin, payAumount,setPayAumount};//metemos todas las funciones y hooks dentro del contexto\r\n    return (\r\n        <ShopContext.Provider value={contextValue}>\r\n            {props.children}\r\n        </ShopContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}